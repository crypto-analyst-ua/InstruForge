// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAF4fWjkdNCUH-1lhfSF3rjqhEV8Anaj_Q",
  authDomain: "instruforge.firebaseapp.com",
  projectId: "instruforge",
  storageBucket: "instruforge.firebasestorage.app",
  messagingSenderId: "343370200187",
  appId: "1:343370200187:web:852f32b4fb1fb53836dede"
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è EmailJS
const EMAILJS_SERVICE_ID = "boltmaster-2025";
const EMAILJS_TEMPLATE_ID = "template_2csi2fp";
const EMAILJS_USER_ID = "hYmYimcQ5x5Mu_skB";

// –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const PRODUCT_FILES = [
    'products1.json',
    'products2.json', 
    'products3.json',
    'products4.json',
    'products5.json'
];

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–æ–¥–∞—Ç–∫–∞
const ADMIN_PASSWORD = "Lenok1378@";
const CART_STORAGE_KEY = "electrotools_cart";
const FAVORITES_STORAGE_KEY = "electrotools_favorites";
const FEED_URL_KEY = "electrotools_feed_url";
const FEED_UPDATE_TIME_KEY = "electrotools_feed_update";
const VIEW_MODE_KEY = "electrotools_view_mode";
const ADMINS_STORAGE_KEY = "electrotools_admins";

// –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
let searchTimeout = null;
const SEARCH_DELAY = 300; // –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—Å

// ====== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ======

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
const searchCache = new Map();
const MAX_CACHE_SIZE = 100;

function clearSearchCache() {
  searchCache.clear();
}

// –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
function normalizeSearchTerm(term) {
  return term.toLowerCase()
    .replace(/[—ó]/g, '—ñ')
    .replace(/[—î]/g, '–µ')
    .replace(/[—ä—å]/g, '')
    .replace(/[^–∞-—è—ñ—î“ë\s]/g, '')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
function getSearchSuggestions(query) {
  try {
    if (!query || query.length < 2) return [];
    
    const normalizedQuery = normalizeSearchTerm(query);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (searchCache.has(normalizedQuery)) {
      return searchCache.get(normalizedQuery);
    }
    
    const suggestions = [];
    const seen = new Set();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const maxProductsToCheck = Math.min(products.length, 500);
    
    for (let i = 0; i < maxProductsToCheck; i++) {
      const product = products[i];
      if (!product || typeof product !== 'object') continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (product.title) {
        const normalizedTitle = normalizeSearchTerm(product.title);
        if (normalizedTitle.includes(normalizedQuery) && !seen.has(product.title)) {
          seen.add(product.title);
          suggestions.push({ 
            value: product.title, 
            type: '–ù–∞–∑–≤–∞', 
            icon: 'üì¶',
            productId: product.id
          });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥
      if (product.brand && !seen.has(product.brand)) {
        const normalizedBrand = normalizeSearchTerm(product.brand);
        if (normalizedBrand.includes(normalizedQuery)) {
          seen.add(product.brand);
          suggestions.push({ 
            value: product.brand, 
            type: '–ë—Ä–µ–Ω–¥', 
            icon: 'üè∑Ô∏è' 
          });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (product.category && !seen.has(product.category)) {
        const normalizedCategory = normalizeSearchTerm(product.category);
        if (normalizedCategory.includes(normalizedQuery)) {
          seen.add(product.category);
          suggestions.push({ 
            value: product.category, 
            type: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', 
            icon: 'üìÇ' 
          });
        }
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
      if (suggestions.length >= 8) break;
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    if (searchCache.size > MAX_CACHE_SIZE) {
      const firstKey = searchCache.keys().next().value;
      searchCache.delete(firstKey);
    }
    
    searchCache.set(normalizedQuery, suggestions.slice(0, 5));
    return suggestions.slice(0, 5);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", error);
    return [];
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
function searchProducts(searchTerm) {
  if (!searchTerm || searchTerm.length < 2) {
    return products;
  }
  
  const normalizedSearch = normalizeSearchTerm(searchTerm);
  const searchWords = normalizedSearch.split(/\s+/).filter(word => word.length > 1);
  
  if (searchWords.length === 0) {
    return products;
  }
  
  return products.filter(product => {
    if (!product.searchIndex) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –ø–æ–∏—Å–∫–∞
    return searchWords.every(word => 
      product.searchIndex.includes(word)
    );
  });
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–µ
function setupSearchHandler() {
  const searchInput = document.getElementById('search');
  let lastSearchValue = '';
  
  searchInput.addEventListener('input', function() {
    const currentValue = this.value.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
    if (currentValue === lastSearchValue) return;
    
    clearTimeout(searchTimeout);
    
    searchTimeout = setTimeout(() => {
      lastSearchValue = currentValue;
      currentFilters.search = currentValue;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      if (currentValue.length > 1) {
        showSearchSuggestions(currentValue);
      } else {
        hideSearchSuggestions();
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      applyFilters();
    }, SEARCH_DELAY);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  searchInput.addEventListener('keydown', function(e) {
    const suggestionsContainer = document.getElementById('search-suggestions');
    if (!suggestionsContainer || suggestionsContainer.style.display === 'none') return;
    
    const suggestions = suggestionsContainer.querySelectorAll('.search-suggestion');
    let activeSuggestion = suggestionsContainer.querySelector('.search-suggestion.active');
    
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        if (!activeSuggestion) {
          suggestions[0]?.classList.add('active');
        } else {
          activeSuggestion.classList.remove('active');
          const next = activeSuggestion.nextElementSibling || suggestions[0];
          next.classList.add('active');
        }
        break;
        
      case 'ArrowUp':
        e.preventDefault();
        if (!activeSuggestion) {
          suggestions[suggestions.length - 1]?.classList.add('active');
        } else {
          activeSuggestion.classList.remove('active');
          const prev = activeSuggestion.previousElementSibling || suggestions[suggestions.length - 1];
          prev.classList.add('active');
        }
        break;
        
      case 'Enter':
        e.preventDefault();
        if (activeSuggestion) {
          activeSuggestion.click();
        }
        break;
        
      case 'Escape':
        hideSearchSuggestions();
        break;
    }
  });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
function showSearchSuggestions(query) {
  if (!query || query.length < 2) {
    hideSearchSuggestions();
    return;
  }
  
  const suggestions = getSearchSuggestions(query);
  const searchContainer = document.querySelector('.search-container');
  
  let suggestionsContainer = document.getElementById('search-suggestions');
  if (!suggestionsContainer) {
    suggestionsContainer = document.createElement('div');
    suggestionsContainer.id = 'search-suggestions';
    suggestionsContainer.className = 'search-suggestions';
    searchContainer.appendChild(suggestionsContainer);
  }
  
  if (suggestions.length > 0) {
    suggestionsContainer.innerHTML = '';
    
    suggestions.forEach((suggestion, index) => {
      const div = document.createElement('div');
      div.className = `search-suggestion ${index === 0 ? 'active' : ''}`;
      div.innerHTML = `
        ${suggestion.icon} 
        <span class="suggestion-text">${escapeHtml(suggestion.value)}</span>
        <span class="suggestion-type">${suggestion.type}</span>
      `;
      
      div.addEventListener('click', () => {
        document.getElementById('search').value = suggestion.value;
        currentFilters.search = suggestion.value;
        applyFilters();
        hideSearchSuggestions();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if (suggestion.productId) {
          showProductDetail(suggestion.productId);
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hover
      div.addEventListener('mouseenter', () => {
        suggestionsContainer.querySelectorAll('.search-suggestion').forEach(s => 
          s.classList.remove('active')
        );
        div.classList.add('active');
      });
      
      suggestionsContainer.appendChild(div);
    });
    
    suggestionsContainer.style.display = 'block';
  } else {
    suggestionsContainer.style.display = 'none';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
function hideSearchSuggestions() {
  const suggestionsContainer = document.getElementById('search-suggestions');
  if (suggestionsContainer) {
    suggestionsContainer.style.display = 'none';
    suggestionsContainer.querySelectorAll('.search-suggestion').forEach(s => 
      s.classList.remove('active')
    );
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function preprocessProducts(productsArray) {
  return productsArray.map(product => {
    if (!product || typeof product !== 'object') return product;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    const searchText = [
      product.title || '',
      product.brand || '',
      product.category || '',
      product.description || '',
      product.specifications || ''
    ].join(' ').toLowerCase();
    
    const searchIndex = normalizeSearchTerm(searchText);
    
    return {
      ...product,
      searchIndex,
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      title: product.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      brand: product.brand || '',
      category: product.category || '',
      description: product.description || '',
      price: Number(product.price) || 0,
      image: product.image || '',
      inStock: product.inStock !== undefined ? product.inStock : true,
      specifications: product.specifications || ''
    };
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
function addSearchStyles() {
  const style = document.createElement('style');
  style.textContent = `
    .search-suggestions {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: white;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      z-index: 1000;
      max-height: 300px;
      overflow-y: auto;
      display: none;
    }
    
    .search-suggestion {
      padding: 12px 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      border-bottom: 1px solid #f0f0f0;
      transition: background-color 0.2s;
    }
    
    .search-suggestion:hover,
    .search-suggestion.active {
      background-color: #f8f9fa;
    }
    
    .search-suggestion:last-child {
      border-bottom: none;
    }
    
    .suggestion-text {
      flex: 1;
      font-weight: 500;
    }
    
    .suggestion-type {
      font-size: 0.8em;
      color: #6c757d;
      background: #e9ecef;
      padding: 2px 6px;
      border-radius: 4px;
    }
    
    .search-container {
      position: relative;
    }
  `;
  document.head.appendChild(style);
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function cleanupSearch() {
  clearTimeout(searchTimeout);
  searchTimeout = null;
}

window.addEventListener('beforeunload', cleanupSearch);

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateStructuredData(products) {
    if (!products || products.length === 0) return;
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const featuredProducts = products.slice(0, 10);
    
    const itemListElement = featuredProducts.map((product, index) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
        let availability = "https://schema.org/InStock";
        if (!product.inStock) {
            availability = "https://schema.org/OutOfStock";
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let brand = "InstruForge";
        const brandMatch = product.title.match(/(SIGMA|AQUATICA|LEO|GRAD|MASTERTOOL)/i);
        if (brandMatch) {
            brand = brandMatch[0];
        } else if (product.brand) {
            brand = product.brand;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let category = "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏";
        if (product.category) {
            category = product.category;
        } else if (product.title.toLowerCase().includes("–Ω–∞—Å–æ—Å")) {
            category = "–°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∞ —Ç–∞ –Ω–∞—Å–æ—Å–∏";
        } else if (product.title.toLowerCase().includes("–∫–ª—é—á") || product.title.toLowerCase().includes("—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")) {
            category = "–†—É—á–Ω—ñ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏";
        } else if (product.title.toLowerCase().includes("–∫—Ä—ñ–ø–ª–µ–Ω") || product.title.toLowerCase().includes("–∑–∞–∫–ª–µ–ø")) {
            category = "–ö—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏";
        }
        
        return {
            "@type": "ListItem",
            "position": index + 1,
            "item": {
                "@type": "Product",
                "name": product.title,
                "description": product.description || `${product.title} - —è–∫—ñ—Å–Ω–∏–π —Ç–æ–≤–∞—Ä –≤—ñ–¥ InstruForge`,
                "brand": {
                    "@type": "Brand",
                    "name": brand
                },
                "category": category,
                "offers": {
                    "@type": "Offer",
                    "availability": availability,
                    "priceCurrency": "UAH",
                    "price": product.price ? product.price.toString() : "0",
                    "priceValidUntil": new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // +90 –¥–Ω–µ–π
                    "url": `${window.location.origin}/#product-${product.id}`
                },
                "image": product.image || "https://instruforge.web.app/images/placeholder-product.jpg",
                "sku": product.id || `item-${index + 1}`,
                "url": `${window.location.origin}/#product-${product.id}`
            }
        };
    });

    const structuredData = {
        "@context": "https://schema.org",
        "@type": "ItemList",
        "name": "–ö–∞—Ç–∞–ª–æ–≥ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ InstruForge",
        "description": "–ü–æ–Ω–∞–¥ 5000 —Ç–æ–≤–∞—Ä—ñ–≤: —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ SIGMA, –Ω–∞—Å–æ—Å–∏ Aquatica —Ç–∞ LEO, –∫—Ä—ñ–ø–ª–µ–Ω–Ω—è, —Å–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∞ –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –ø–æ –£–∫—Ä–∞—ó–Ω—ñ",
        "url": window.location.href,
        "numberOfItems": products.length,
        "itemListElement": itemListElement
    };

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ JSON-LD —Å–∫—Ä–∏–ø—Ç—ã (—Ç–æ–ª—å–∫–æ ItemList, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º)
    const oldScripts = document.querySelectorAll('script[type="application/ld+json"]');
    oldScripts.forEach(script => {
        try {
            const data = JSON.parse(script.textContent);
            if (data["@type"] === "ItemList") {
                script.remove();
            }
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π script —ç–ª–µ–º–µ–Ω—Ç
    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.textContent = JSON.stringify(structuredData, null, 2);
    document.head.appendChild(script);
    
    console.log('Structured data updated for', products.length, 'products');
}

let products = [];
let cart = {};
let favorites = {};
let adminMode = false;
let showingFavorites = false;
let currentUser = null;
let currentPage = 1;
const productsPerPage = 12;
let currentFilters = {
  category: '',
  brand: '',
  minPrice: null,
  maxPrice: null,
  sort: 'default',
  search: '',
  availability: '',
  source: ''
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
let currentRating = 0;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
function setupPageCounter() {
  const params = new URLSearchParams({
      style: 'flat-square',
      label: 'Views',
      color: 'blue',
      logo: 'firebase'
  });

  // –ë–µ—Ä–µ–º–æ —à–ª—è—Ö –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const currentPath = window.location.pathname;

  // –†–æ–±–∏–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è boltmaster-2025.web.app
  const counterURL = `https://hits.sh/boltmaster-2025.web.app${currentPath}.svg?${params.toString()}`;
  const pageViewsElement = document.getElementById('page-views');
  if (pageViewsElement) {
      pageViewsElement.src = counterURL;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
function sendOrderEmail(orderId, order) {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  let itemsList = '';
  for (const [productId, quantity] of Object.entries(order.items)) {
    const product = products.find(p => p.id === productId);
    if (product) {
      itemsList += `
        <tr>
          <td>${product.title}</td>
          <td>${quantity}</td>
          <td>${formatPrice(product.price)} ‚Ç¥</td>
          <td>${formatPrice(product.price * quantity)} ‚Ç¥</td>
        </tr>
      `;
    }
  }
  
  const templateParams = {
    to_email: "korovinkonstantin0@gmail.com",
    order_id: orderId,
    customer_name: order.userName,
    customer_email: order.userEmail,
    customer_phone: order.userPhone,
    delivery_service: order.delivery.service,
    delivery_city: order.delivery.city,
    delivery_warehouse: order.delivery.warehouse,
    payment_method: order.paymentMethod === 'cash' ? '–ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ' : '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é',
    total_amount: formatPrice(order.total),
    items: itemsList,
    order_date: new Date().toLocaleString('uk-UA')
  };

  emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams)
    .then(function(response) {
      console.log('Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', response.status, response.text);
    }, function(error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ JSON —Ñ–∞–π–ª—É
function loadProductsFromJson() {
    const promises = PRODUCT_FILES.map(file => 
        fetch(file)
            .then(response => {
                if (!response.ok) {
                    console.warn(`–§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    return [];
                }
                return response.json();
            })
            .then(productsArray => {
                return productsArray.map(product => ({
                    ...product,
                    source: file,
                    isPopular: product.isPopular || false
                }));
            })
            .catch(error => {
                console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, error);
                return [];
            })
    );

    return Promise.all(promises)
        .then(results => {
            let allProducts = [];
            results.forEach(productsArray => {
                if (Array.isArray(productsArray)) {
                    allProducts = allProducts.concat(productsArray);
                }
            });
            
            if (allProducts.length === 0) {
                const backup = localStorage.getItem('products_backup');
                if (backup) {
                    return JSON.parse(backup);
                }
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –∂–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É');
            }
            
            return shuffleArray(allProducts);
        });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ JSON —Ñ–∞–π–ª–æ–≤
async function checkFilesAvailability() {
    const availability = {};
    
    for (const file of PRODUCT_FILES) {
        try {
            const response = await fetch(file, { method: 'HEAD' });
            availability[file] = response.ok;
        } catch (error) {
            availability[file] = false;
        }
    }
    
    document.querySelectorAll('.source-tab').forEach(tab => {
        const onclickAttr = tab.getAttribute('onclick');
        const match = onclickAttr.match(/switchSource\('([^']+)'/);
        if (match && match[1] !== 'all') {
            const file = match[1];
            if (!availability[file]) {
                tab.style.display = 'none';
            }
        }
    });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
function initApp() {
  emailjs.init(EMAILJS_USER_ID);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  addSearchStyles();

  auth.onAuthStateChanged(user => {
    if (user) {
      currentUser = user;
      document.getElementById('login-btn').style.display = 'none';
      document.getElementById('user-menu').style.display = 'inline-block';
      document.getElementById('admin-access-btn').style.display = 'inline-block';
      document.getElementById('user-name').textContent = user.displayName || user.email;
      
      checkAdminStatus(user.uid);
    } else {
      currentUser = null;
      document.getElementById('login-btn').style.display = 'inline-block';
      document.getElementById('user-menu').style.display = 'none';
      document.getElementById('admin-access-btn').style.display = 'none';
      document.getElementById("admin-panel").style.display = "none";
      adminMode = false;
      document.getElementById("page-views-container").style.display = "none";
    }
  });
  
  loadProducts().catch(error => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Firestore, –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ JSON:", error);
    
    loadProductsFromJson()
      .then(jsonProducts => {
        products = preprocessProducts(jsonProducts);
        window.currentProducts = products;
        generateStructuredData(products);
        updateCartCount();
        renderProducts();
        renderFeaturedProducts();
        renderCategories();
        renderBrands();
        showNotification(`–¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ ${PRODUCT_FILES.length} —Ñ–∞–π–ª—ñ–≤`);
        
        localStorage.setItem('products_backup', JSON.stringify(products));
      })
      .catch(jsonError => {
        console.error("JSON:", jsonError);
        showNotification("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏", "error");
      });
  }).finally(() => {
      checkFilesAvailability();
  });
  
  const cartData = localStorage.getItem(CART_STORAGE_KEY);
  if(cartData) cart = JSON.parse(cartData);
  
  const favoritesData = localStorage.getItem(FAVORITES_STORAGE_KEY);
  if(favoritesData) favorites = JSON.parse(favoritesData);
  
  const viewMode = localStorage.getItem(VIEW_MODE_KEY) || 'grid';
  setViewMode(viewMode);
  
  updateCartCount();
  
  const feedUrl = localStorage.getItem(FEED_URL_KEY);
  if (feedUrl) {
    document.getElementById("feed-url").value = feedUrl;
  }
  
  document.getElementById("year").innerText = new Date().getFullYear();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  setupSearchHandler();
  
  document.getElementById('category').addEventListener('change', function() {
    currentFilters.category = this.value;
    applyFilters();
  });
  
  document.getElementById('brand').addEventListener('change', function() {
    currentFilters.brand = this.value;
    applyFilters();
  });
  
  document.getElementById('sort').addEventListener('change', function() {
    currentFilters.sort = this.value;
    applyFilters();
  });
  
  document.getElementById('availability').addEventListener('change', function() {
    currentFilters.availability = this.value;
    applyFilters();
  });
  
  document.getElementById('price-min').addEventListener('change', function() {
    currentFilters.minPrice = this.value ? parseInt(this.value) : null;
    applyFilters();
  });
  
  document.getElementById('price-max').addEventListener('change', function() {
    currentFilters.maxPrice = this.value ? parseInt(this.value) : null;
    applyFilters();
  });
  
  window.addEventListener('resize', adjustHeaderTitle);
  adjustHeaderTitle();
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–∏—Å–∫–∞
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.search-container')) {
      hideSearchSuggestions();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function adjustHeaderTitle() {
  const logoElement = document.querySelector('.logo h1');
  if (window.innerWidth <= 768) {
    logoElement.style.fontSize = Math.min(1.5, 4 * window.innerWidth / 100) + 'rem';
  }
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é loadProducts –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤ Firestore –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤
function loadProducts() {
  const cachedProducts = localStorage.getItem('products_cache');
  const cacheTime = localStorage.getItem('products_cache_time');
  
  if (cachedProducts && cacheTime && Date.now() - cacheTime < 300000) {
    products = preprocessProducts(JSON.parse(cachedProducts));
    products = shuffleArray(products);
    window.currentProducts = products;
    generateStructuredData(products);
    renderProducts();
    return Promise.resolve();
  }
  
  showLoadingSkeleton();
  
  return db.collection("products")
        .get()
        .then((querySnapshot) => {
            if (querySnapshot.empty) {
        const data = localStorage.getItem('products_backup');
        if (data) {
          products = preprocessProducts(JSON.parse(data));
          products = shuffleArray(products);
          window.currentProducts = products;
          generateStructuredData(products);
          updateCartCount();
          renderProducts();
          renderFeaturedProducts();
          renderCategories();
          renderBrands();
          return Promise.resolve();
        } else {
          return loadProductsFromJson()
            .then(jsonProducts => {
              products = preprocessProducts(jsonProducts);
              products = shuffleArray(products);
              window.currentProducts = products;
              generateStructuredData(products);
              updateCartCount();
              renderProducts();
              renderFeaturedProducts();
              renderCategories();
              renderBrands();
              showNotification("–¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É");
              
              localStorage.setItem('products_backup', JSON.stringify(products));
            });
        }
      } else {
                products = [];
                querySnapshot.forEach((doc) => {
                    products.push({ id: doc.id, ...doc.data() });
                });
                
                products = preprocessProducts(products);
                products = shuffleArray(products);
                window.currentProducts = products;
                generateStructuredData(products);
        
        localStorage.setItem('products_cache', JSON.stringify(products));
        localStorage.setItem('products_cache_time', Date.now());
        
        updateCartCount();
        renderProducts();
        renderFeaturedProducts();
        renderCategories();
        renderBrands();
        return Promise.resolve();
      }
    })
    .catch((error) => {
      console.error("", error);
      showNotification("", "error");
      
      const data = localStorage.getItem('products_backup');
      if (data) {
        products = preprocessProducts(JSON.parse(data));
        products = shuffleArray(products);
        window.currentProducts = products;
        generateStructuredData(products);
        updateCartCount();
        renderProducts();
        renderFeaturedProducts();
        renderCategories();
        renderBrands();
        return Promise.resolve();
      } else {
        return Promise.reject(error);
      }
    });
}

// ===== –§–£–ù–ö–¶–Ü–á –ü–ê–ì–Ü–ù–ê–¶–Ü–á =====

function changePage(page) {
  currentPage = page;
  showLoadingSkeleton();
  
  setTimeout(() => {
    renderProducts();
    updatePagination();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, 100);
}

function updatePagination() {
  const paginationContainer = document.getElementById("pagination");
  if (!paginationContainer) return;
  
  let filteredProducts = getFilteredProducts();
  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
  
  if (totalPages <= 1) {
    paginationContainer.style.display = 'none';
    return;
  }
  
  paginationContainer.style.display = 'flex';
  paginationContainer.innerHTML = '';
  
  const prevButton = document.createElement('button');
  prevButton.innerHTML = '&laquo;';
  prevButton.disabled = currentPage === 1;
  prevButton.onclick = () => changePage(currentPage - 1);
  paginationContainer.appendChild(prevButton);
  
  let startPage = Math.max(1, currentPage - 2);
  let endPage = Math.min(totalPages, startPage + 4);
  
  if (endPage - startPage < 4) {
    startPage = Math.max(1, endPage - 4);
  }
  
  for (let i = startPage; i <= endPage; i++) {
    const button = document.createElement('button');
    button.textContent = i;
    button.classList.toggle('active', i === currentPage);
    button.onclick = () => changePage(i);
    paginationContainer.appendChild(button);
  }
  
  const nextButton = document.createElement('button');
  nextButton.innerHTML = '&raquo;';
  nextButton.disabled = currentPage === totalPages;
  nextButton.onclick = () => changePage(currentPage + 1);
  paginationContainer.appendChild(nextButton);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getFilteredProducts –¥–ª—è –ø–æ–∏—Å–∫–∞
function getFilteredProducts() {
  let filteredProducts = [...products];
  
  if (showingFavorites) {
    filteredProducts = filteredProducts.filter(product => favorites[product.id]);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
  if (currentFilters.search) {
    filteredProducts = searchProducts(currentFilters.search);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (currentFilters.category) {
    filteredProducts = filteredProducts.filter(product => 
      product.category === currentFilters.category
    );
  }
  
  if (currentFilters.brand) {
    filteredProducts = filteredProducts.filter(product => 
      product.brand === currentFilters.brand
    );
  }
  
  if (currentFilters.minPrice) {
    filteredProducts = filteredProducts.filter(product => 
      product.price >= currentFilters.minPrice
    );
  }
  
  if (currentFilters.maxPrice) {
    filteredProducts = filteredProducts.filter(product => 
      product.price <= currentFilters.maxPrice
    );
  }
  
  if (currentFilters.availability) {
    filteredProducts = filteredProducts.filter(product => 
      currentFilters.availability === 'in-stock' ? product.inStock : !product.inStock
    );
  }
  
  if (currentFilters.source) {
    filteredProducts = filteredProducts.filter(product => 
      product.source === currentFilters.source
    );
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  switch (currentFilters.sort) {
    case 'price-asc':
      filteredProducts.sort((a, b) => a.price - b.price);
      break;
    case 'price-desc':
      filteredProducts.sort((a, b) => b.price - a.price);
      break;
    case 'name-asc':
      filteredProducts.sort((a, b) => a.title.localeCompare(b.title));
      break;
    case 'name-desc':
      filteredProducts.sort((a, b) => b.title.localeCompare(a.title));
      break;
    default:
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
      filteredProducts.sort((a, b) => {
        if (a.isPopular && !b.isPopular) return -1;
        if (!a.isPopular && b.isPopular) return 1;
        return 0;
      });
      break;
  }
  
  return filteredProducts;
}

// ===== –ö–Ü–ù–ï–¶–¨ –§–£–ù–ö–¶–Ü–á –ü–ê–ì–Ü–ù–ê–¶–Ü–á =====

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
function changePage(page) {
  currentPage = page;
  showLoadingSkeleton();
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setTimeout –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
  setTimeout(() => {
    renderProducts();
    updatePagination();
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤–≥–æ—Ä—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, 100);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
function updatePagination() {
  const paginationContainer = document.getElementById("pagination");
  if (!paginationContainer) return; // –î–æ–¥–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
  
  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  let filteredProducts = getFilteredProducts();
  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
  
  // –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–µ–º–∞—î –∞–±–æ –≤—Å—å–æ–≥–æ –æ–¥–Ω–∞, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
  if (totalPages <= 1) {
    paginationContainer.style.display = 'none';
    return;
  }
  
  paginationContainer.style.display = 'flex';
  
  // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  paginationContainer.innerHTML = '';
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  const prevButton = document.createElement('button');
  prevButton.innerHTML = '&laquo;';
  prevButton.disabled = currentPage === 1;
  prevButton.onclick = () => changePage(currentPage - 1);
  paginationContainer.appendChild(prevButton);
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  let startPage = Math.max(1, currentPage - 2);
  let endPage = Math.min(totalPages, startPage + 4);
  
  // –ö–æ—Ä–µ–≥—É—î–º–æ startPage, —è–∫—â–æ –º–∏ –≤ –∫—ñ–Ω—Ü—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
  if (endPage - startPage < 4) {
    startPage = Math.max(1, endPage - 4);
  }
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  for (let i = startPage; i <= endPage; i++) {
    const button = document.createElement('button');
    button.textContent = i;
    button.classList.toggle('active', i === currentPage);
    button.onclick = () => changePage(i);
    paginationContainer.appendChild(button);
  }
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥"
  const nextButton = document.createElement('button');
  nextButton.innerHTML = '&raquo;';
  nextButton.disabled = currentPage === totalPages;
  nextButton.onclick = () => changePage(currentPage + 1);
  paginationContainer.appendChild(nextButton);
}

// ===== –ö–Ü–ù–ï–¶–¨ –§–£–ù–ö–¶–Ü–á –ü–ê–ì–Ü–ù–ê–¶–Ü–á =====

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML-—Ñ—ñ–¥—É
async function loadFromFeed() {
  const messageElement = document.getElementById("feed-message");
  messageElement.textContent = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...";
  
  // –û—Ç—Ä–∏–º—É—î–º–æ URL —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  const feedUrl = localStorage.getItem(FEED_URL_KEY) || document.getElementById("feed-url").value;
  
  if (!feedUrl) {
    messageElement.textContent = "–í–≤–µ–¥—ñ—Ç—å URL —Ñ—ñ–¥—É";
    showNotification("–í–≤–µ–¥—ñ—Ç—å URL —Ñ—ñ–¥—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
    return;
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ URL, —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –≤–≤–µ–¥–µ–Ω–∏–π –≤ –ø–æ–ª–µ
  if (document.getElementById("feed-url").value) {
    localStorage.setItem(FEED_URL_KEY, document.getElementById("feed-url").value);
  }
  
  try {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –æ–±—Ö–æ–¥—É CORS
    const proxyUrl = 'https://corsproxy.io/?';
    const response = await fetch(proxyUrl + encodeURIComponent(feedUrl));
    
    if (!response.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
    }
    
    const xmlText = await response.text();
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlText, "text/xml");
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
    if (xmlDoc.getElementsByTagName("parsererror").length > 0) {
      throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML");
    }
    
    // –ü–∞—Ä—Å–∏–º–æ XML –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    let items = [];
    const offers = xmlDoc.getElementsByTagName("offer");
    
    for (let i = 0; i < offers.length; i++) {
      const offer = offers[i];
      const id = offer.getAttribute("id") || `feed-${i}`;
      const getValue = (tagName) => {
        const element = offer.getElementsByTagName(tagName)[0];
        return element ? element.textContent.trim() : "";
      };
      
      const title = getValue("name") || getValue("title") || getValue("model");
      const priceText = getValue("price");
      const price = priceText ? parseFloat(priceText.replace(/[^0-9.,]/g, "").replace(",", ".")) : 0;
      const description = getValue("description") || "";
      const brand = getValue("vendor") || getValue("brand") || "–ù–µ–≤—ñ–¥–æ–º–æ";
      
      // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      let image = "";
      const pictureElement = offer.getElementsByTagName("picture")[0];
      if (pictureElement) {
        image = pictureElement.textContent.trim();
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
      const category = getValue("category") || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó";
      
      items.push({
        id,
        title,
        price,
        description,
        image: image, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        category,
        brand,
        fromFeed: true,
        inStock: true,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    }
    
    if (items.length === 0) {
      throw new Error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ñ—ñ–¥—ñ");
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –≤ Firestore
    const batch = db.batch();
    const productsRef = db.collection("products");
    
    for (const item of items) {
      const productRef = productsRef.doc(item.id);
      batch.set(productRef, item, { merge: true });
    }
    
    await batch.commit();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    localStorage.setItem(FEED_UPDATE_TIME_KEY, new Date().getTime());
    
    messageElement.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${items.length} —Ç–æ–≤–∞—Ä—ñ–≤`;
    showNotification("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ —Ñ—ñ–¥—É");
    
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–¥—É:", error);
    messageElement.textContent = `–ü–æ–º–∏–ª–∫–∞: ${error.message}`;
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—É", "error");
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤ Firestore
function saveProduct(product) {
  const productData = {
    ...product,
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  };
  
  if (!product.id) {
    productData.createdAt = firebase.firestore.FieldValue.serverTimestamp();
    productData.id = generateId();
  }
  
  const productRef = db.collection("products").doc(productData.id);
  
  return productRef.set(productData, { merge: true })
    .then(() => {
      showNotification("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
      loadProducts(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
      return productData.id;
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", "error");
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
      if (!product.id) {
        product.id = generateId();
        products.push(product);
      } else {
        const index = products.findIndex(p => p.id === product.id);
        if (index !== -1) {
          products[index] = product;
        } else {
          products.push(product);
        }
      }
      
      localStorage.setItem('products_backup', JSON.stringify(products));
      renderProducts();
      
      return product.id;
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
function generateId() {
  return 'product-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function showLoadingSkeleton() {
  const grid = document.getElementById("product-grid");
  grid.innerHTML = '';
  
  for (let i = 0; i < 8; i++) {
    const skeleton = document.createElement("div");
    skeleton.className = "card";
    skeleton.innerHTML = `
      <div class="skeleton-img"></div>
      <div class="skeleton-title"></div>
      <div class="skeleton-text"></div>
      <div class="skeleton-text" style="width: 80%;"></div>
      <div class="skeleton-price"></div>
      <div class="skeleton-text" style="height: 36px; margin-top: 15px;"></div>
    `;
    grid.appendChild(skeleton);
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
function renderProducts() {
  const grid = document.getElementById("product-grid");
  if (!grid) return; // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∞
  
  grid.innerHTML = '';
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
  let filteredProducts = getFilteredProducts();
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫
  document.getElementById('products-title').textContent = showingFavorites ? '–û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏' : '';
  document.getElementById('products-count').textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ: ${filteredProducts.length}`;
  
  // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
  const startIndex = (currentPage - 1) * productsPerPage;
  const paginatedProducts = filteredProducts.slice(startIndex, startIndex + productsPerPage);
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏
  if (paginatedProducts.length === 0) {
    grid.innerHTML = `
      <div class="empty-cart">
        <i class="fas fa-search"></i>
        <h3>–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
        <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
      </div>
    `;
    updatePagination();
    return;
  }
  
  const viewMode = localStorage.getItem(VIEW_MODE_KEY) || 'grid';
  const isListView = viewMode === 'list';
  
  if (isListView) {
    grid.classList.add('list-view');
  } else {
    grid.classList.remove('list-view');
  }
  
  paginatedProducts.forEach(product => {
    const card = document.createElement("div");
    card.className = "card";
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ–¥–∞–Ω–∏–π —Ç–æ–≤–∞—Ä –≤ –æ–±—Ä–∞–Ω–µ
    const isFavorite = favorites[product.id];
    
    card.innerHTML = `
      ${product.discount ? `<div class="card-discount">-${product.discount}%</div>` : ''}
      ${product.isNew ? '<div class="card-badge">–ù–æ–≤–∏–Ω–∫–∞</div>' : ''}
      <img src="${product.image || 'https://via.placeholder.com/300x200?text=No+Image'}" alt="${product.title}">
      <h3>${product.title}</h3>
      <p>${product.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}</p>
      <div class="price-container">
        <span class="price">${formatPrice(product.price)} ‚Ç¥</span>
        ${product.oldPrice ? `<span class="old-price">${formatPrice(product.oldPrice)} ‚Ç¥</span>` : ''}
      </div>
      
      <div class="card-actions">
        <button class="btn btn-buy" onclick="addToCart('${product.id}')">
          <i class="fas fa-shopping-cart"></i> –ö—É–ø–∏—Ç–∏
        </button>
        <button class="btn btn-detail" onclick="showProductDetail('${product.id}')">
          <i class="fas fa-info"></i> –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
        </button>
        <button class="btn-favorite ${isFavorite ? 'active' : ''}" onclick="toggleFavorite('${product.id}')">
          <i class="${isFavorite ? 'fas' : 'far'} fa-heart"></i>
        </button>
      </div>
    `;
    
    grid.appendChild(card);
  });
  
  updatePagination();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function renderFeaturedProducts() {
  const featuredContainer = document.getElementById("featured-products");
  featuredContainer.innerHTML = '';
  
  // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–ª–∞–≥–æ–º isPopular
  let featuredProducts = [];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–ª–∞–≥–æ–º isPopular
  const popularProducts = products.filter(product => product.isPopular);
  
  if (popularProducts.length >= 3) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    featuredProducts = shuffleArray(popularProducts).slice(0, 5);
  } else {
    // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    featuredProducts = shuffleArray([...products]).slice(0, 5);
  }
  
  featuredProducts.forEach(product => {
    const item = document.createElement("div");
    item.className = "featured-item";
    item.innerHTML = `
      <img src="${product.image || 'https://via.placeholder.com/60x60?text=No+Image'}" alt="${product.title}">
      <div class="featured-item-info">
        <h4 class="featured-item-title">${product.title}</h4>
        <div class="featured-item-price">${formatPrice(product.price)} ‚Ç¥</div>
      </div>
    `;
    
    item.addEventListener('click', () => showProductDetail(product.id));
    featuredContainer.appendChild(item);
  });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function renderCategories() {
  const categorySelect = document.getElementById("category");
  
  // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –æ–ø—Ü—ñ—ó –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
  while (categorySelect.options.length > 1) {
    categorySelect.remove(1);
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const categories = [...new Set(products.map(product => product.category))].filter(Boolean);
  
  categories.forEach(category => {
    const option = document.createElement("option");
    option.value = category;
    option.textContent = category;
    categorySelect.appendChild(option);
  });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±—Ä–µ–Ω–¥—ñ–≤
function renderBrands() {
  const brandSelect = document.getElementById("brand");
  
  // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –æ–ø—Ü—ñ—ó –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
  while (brandSelect.options.length > 1) {
    brandSelect.remove(1);
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –±—Ä–µ–Ω–¥–∏
  const brands = [...new Set(products.map(product => product.brand))].filter(Boolean);
  
  brands.forEach(brand => {
    const option = document.createElement("option");
    option.value = brand;
    option.textContent = brand;
    brandSelect.appendChild(option);
  });
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
function formatPrice(price) {
  return new Intl.NumberFormat('uk-UA').format(price);
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
function showNotification(message, type = "success") {
  const notification = document.getElementById("notification");
  const text = document.getElementById("notification-text");
  text.textContent = message;
  notification.className = `notification ${type}`;
  notification.classList.add("show");
  
  setTimeout(() => {
    notification.classList.remove("show");
  }, 3000);
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫
function addToCart(productId) {
  if (!cart[productId]) {
    cart[productId] = 0;
  }
  cart[productId]++;
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫ –≤ localStorage
  localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
  
  updateCartCount();
  showNotification("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞");
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∫–æ—à–∏–∫–∞
function updateCartCount() {
  const count = Object.values(cart).reduce((total, qty) => total + qty, 0);
  document.getElementById("cart-count").textContent = count;
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ–≥–æ
function toggleFavorite(productId) {
  if (favorites[productId]) {
    delete favorites[productId];
  } else {
    favorites[productId] = true;
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–µ –≤ localStorage
  localStorage.setItem(FAVORITES_STORAGE_KEY, JSON.stringify(favorites));
  
  // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å —É —Ä–µ–∂–∏–º—ñ –æ–±—Ä–∞–Ω–æ–≥–æ
  if (showingFavorites) {
    renderProducts();
  } else {
    // –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É —Å–µ—Ä—Ü—è —É —Ç–æ–≤–∞—Ä—É
    const heartIcon = document.querySelector(`button[onclick="toggleFavorite('${productId}')"] i`);
    if (heartIcon) {
      heartIcon.className = favorites[productId] ? 'fas fa-heart' : 'far fa-heart';
      heartIcon.parentElement.className = `btn-favorite ${favorites[productId] ? 'active' : ''}`;
    }
  }
  
  showNotification(favorites[productId] ? "–î–æ–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–Ω–µ" : "–í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ");
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ
function toggleFavorites() {
  showingFavorites = !showingFavorites;
  
  const favButton = document.getElementById("favorites-btn");
  if (showingFavorites) {
    favButton.innerHTML = '<i class="fas fa-heart"></i>';
    favButton.style.color = '#e74c3c';
  } else {
    favButton.innerHTML = '<i class="far fa-heart"></i>';
    favButton.style.color = '';
  }
  
  applyFilters();
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function applyFilters() {
  // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏
  const minPrice = document.getElementById("price-min").value ? parseInt(document.getElementById("price-min").value) : null;
  const maxPrice = document.getElementById("price-max").value ? parseInt(document.getElementById("price-max").value) : null;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  currentFilters.minPrice = minPrice;
  currentFilters.maxPrice = maxPrice;
  currentFilters.category = document.getElementById("category").value;
  currentFilters.brand = document.getElementById("brand").value;
  currentFilters.availability = document.getElementById("availability").value;
  currentFilters.sort = document.getElementById("sort").value;
  
  currentPage = 1;
  renderProducts();
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ç–æ–≤–∞—Ä—ñ–≤
  const filteredProducts = getFilteredProducts();
  document.getElementById('products-count').textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ: ${filteredProducts.length}`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  generateStructuredData(filteredProducts);
}

// –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function resetFilters() {
  document.getElementById("price-min").value = '';
  document.getElementById("price-max").value = '';
  document.getElementById("category").value = '';
  document.getElementById("brand").value = '';
  document.getElementById("availability").value = '';
  document.getElementById("sort").value = 'default';
  document.getElementById("search").value = '';
  
  currentFilters = {
    category: '',
    brand: '',
    minPrice: null,
    maxPrice: null,
    sort: 'default',
    search: '',
    availability: '',
    source: ''
  };
  
  applyFilters();
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É
function setViewMode(mode) {
  localStorage.setItem(VIEW_MODE_KEY, mode);
  
  const gridBtn = document.getElementById("grid-view");
  const listBtn = document.getElementById("list-view");
  
  if (mode === 'grid') {
    gridBtn.classList.add('active');
    listBtn.classList.remove('active');
  } else {
    gridBtn.classList.remove('active');
    listBtn.classList.add('active');
  }
  
  renderProducts();
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É
function showProductDetail(productId) {
  const product = products.find(p => p.id === productId);
  if (!product) return;
  
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>${product.title}</h3>
    <div class="product-detail">
      <div class="product-image">
        <img src="${product.image || 'https://via.placeholder.com/400x300?text=No+Image'}" alt="${product.title}">
      </div>
      <div class="product-info">
        <div class="price-container">
          <span class="detail-price">${formatPrice(product.price)} ‚Ç¥</span>
          ${product.oldPrice ? `<span class="old-price">${formatPrice(product.oldPrice)} ‚Ç¥</span>` : ''}
        </div>
        <div class="product-meta">
          <div><i class="fas fa-box"></i> ${product.inStock ? '–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' : '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}</div>
          <div><i class="fas fa-truck"></i> –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 1-2 –¥–Ω—ñ</div>
          <div><i class="fas fa-shield-alt"></i> –ì–∞—Ä–∞–Ω—Ç—ñ—è 12 –º—ñ—Å—è—Ü—ñ–≤</div>
        </div>
        <div class="product-description">
          <h4>–û–ø–∏—Å</h4>
          <p>${product.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}</p>
        </div>
        <div class="quantity-control">
          <button class="quantity-btn" onclick="changeQuantity(-1)">-</button>
          <input type="number" class="quantity-input" id="product-quantity" value="1" min="1">
          <button class="quantity-btn" onclick="changeQuantity(1)">+</button>
        </div>
        <div class="detail-actions">
          <button class="btn btn-buy" onclick="addToCartWithQuantity('${product.id}')">
            <i class="fas fa-shopping-cart"></i> –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞
          </button>
          <button class="btn-favorite ${favorites[product.id] ? 'active' : ''}" onclick="toggleFavorite('${product.id}')">
            <i class="${favorites[product.id] ? 'fas' : 'far'} fa-heart"></i>
          </button>
        </div>
      </div>
    </div>
    <div class="product-reviews">
      <h4>–í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä</h4>
      <div id="reviews-container-${product.id}"></div>
      
      ${currentUser ? `
        <div class="add-review-section">
          <h4>–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</h4>
          <form onsubmit="addReview(event, '${product.id}')">
            <div class="form-group">
              <label>–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞</label>
              <div class="rating-stars">
                <span onclick="setRating(1)">‚òÖ</span>
                <span onclick="setRating(2)">‚òÖ</span>
                <span onclick="setRating(3)">‚òÖ</span>
                <span onclick="setRating(4)">‚òÖ</span>
                <span onclick="setRating(5)">‚òÖ</span>
              </div>
            </div>
            <div class="form-group">
              <label>–í–∞—à –≤—ñ–¥–≥—É–∫</label>
              <textarea id="review-text" required></textarea>
            </div>
            <button type="submit" class="btn">–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
          </form>
        </div>
      ` : `
        <p>–£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</p>
      `}
    </div>
  `;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  loadReviews(product.id);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
  currentRating = 0;
  updateRatingStars();
  
  openModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
function setRating(rating) {
  currentRating = rating;
  updateRatingStars();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateRatingStars() {
  const stars = document.querySelectorAll('.rating-stars span');
  stars.forEach((star, index) => {
    if (index < currentRating) {
      star.classList.add('active');
    } else {
      star.classList.remove('active');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
function loadReviews(productId) {
  const reviewsContainer = document.getElementById(`reviews-container-${productId}`);
  if (!reviewsContainer) return;
  
  reviewsContainer.innerHTML = '<p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤...</p>';
  
  db.collection("reviews")
    .where("productId", "==", productId)
    .where("approved", "==", true)
    .orderBy("createdAt", "desc")
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        reviewsContainer.innerHTML = "<p>–©–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ —Ü–µ–π —Ç–æ–≤–∞—Ä</p>";
        return;
      }
      
      let reviewsHTML = "";
      querySnapshot.forEach((doc) => {
        const review = doc.data();
        const reviewDate = review.createdAt ? review.createdAt.toDate().toLocaleDateString('uk-UA') : '';
        
        reviewsHTML += `
          <div class="review-item">
            <div class="review-header">
              <strong>${review.userName}</strong>
              <div class="review-rating">${"‚òÖ".repeat(review.rating)}${"‚òÜ".repeat(5 - review.rating)}</div>
              <span class="review-date">${reviewDate}</span>
            </div>
            <p>${review.text}</p>
          </div>
        `;
      });
      
      reviewsContainer.innerHTML = reviewsHTML;
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤: ", error);
      reviewsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤</p>";
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
function addReview(event, productId) {
  event.preventDefault();
  
  if (!currentUser) {
    showNotification("–£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", "warning");
    return;
  }
  
  if (currentRating === 0) {
    showNotification("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", "warning");
    return;
  }
  
  const text = document.getElementById('review-text').value;
  
  const newReview = {
    productId,
    userId: currentUser.uid,
    userName: currentUser.displayName || currentUser.email,
    rating: currentRating,
    text,
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    approved: false // –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  };
  
  db.collection("reviews").add(newReview)
    .then(() => {
      showNotification("–í—ñ–¥–≥—É–∫ –¥–æ–¥–∞–Ω–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é");
      document.getElementById('review-text').value = "";
      currentRating = 0;
      updateRatingStars();
      loadReviews(productId); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É", "error");
    });
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
function addToCartWithQuantity(productId) {
  const quantity = parseInt(document.getElementById("product-quantity").value) || 1;
  
  if (!cart[productId]) {
    cart[productId] = 0;
  }
  cart[productId] += quantity;
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫ –≤ localStorage
  localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
  
  updateCartCount();
  showNotification("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞");
  closeModal();
}

// –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É
function changeQuantity(delta) {
  const input = document.getElementById("product-quantity");
  let value = parseInt(input.value) || 1;
  value += delta;
  
  if (value < 1) value = 1;
  
  input.value = value;
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–æ—à–∏–∫–∞
function openCart() {
  const modalContent = document.getElementById("modal-content");
  
  if (Object.keys(cart).length === 0) {
    modalContent.innerHTML = `
      <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
      <h3>–ö–æ—à–∏–∫</h3>
      <div class="empty-cart">
        <i class="fas fa-shopping-cart"></i>
        <h3>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</h3>
        <p>–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É</p>
      </div>
    `;
  } else {
    let total = 0;
    let cartItemsHTML = '';
    
    for (const [productId, quantity] of Object.entries(cart)) {
      const product = products.find(p => p.id === productId);
      if (product) {
        const itemTotal = product.price * quantity;
        total += itemTotal;
        
        cartItemsHTML += `
          <div class="cart-item">
            <img src="${product.image || 'https://via.placeholder.com/80x80?text=No+Image'}" alt="${product.title}" class="cart-item-image">
            <div class="cart-item-details">
              <h4 class="cart-item-title">${product.title}</h4>
              <div class="cart-item-price">${formatPrice(product.price)} ‚Ç¥ x ${quantity} = ${formatPrice(itemTotal)} ‚Ç¥</div>
              <div class="cart-item-actions">
                <button class="btn" onclick="changeCartQuantity('${productId}', -1)">-</button>
                <span>${quantity}</span>
                <button class="btn" onclick="changeCartQuantity('${productId}', 1)">+</button>
                <button class="btn" onclick="removeFromCart('${productId}')"><i class="fas fa-trash"></i></button>
              </div>
            </div>
          </div>
        `;
      }
    }
    
    modalContent.innerHTML = `
      <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
      <h3>–ö–æ—à–∏–∫</h3>
      <div class="cart-items">
        ${cartItemsHTML}
      </div>
      <div class="cart-footer">
        <div class="cart-total">–†–∞–∑–æ–º: ${formatPrice(total)} ‚Ç¥</div>
        <button class="btn btn-buy" onclick="checkout()">–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
      </div>
    `;
  }
  
  openModal();
}

// –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É
function changeCartQuantity(productId, delta) {
  if (!cart[productId] && delta < 1) return; // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤—ñ–¥'—î–º–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
  
  cart[productId] += delta;
  
  if (cart[productId] < 1) {
    delete cart[productId];
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫ –≤ localStorage
  localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
  
  updateCartCount();
  openCart(); // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –∫–æ—à–∏–∫
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—à–∏–∫–∞
function removeFromCart(productId) {
  delete cart[productId];
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫ –≤ localStorage
  localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
  
  updateCartCount();
  openCart(); // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –∫–æ—à–∏–∫
}

// ===== –û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø =====
function checkout() {
  if (!currentUser) {
    closeModal();
    openAuthModal();
    showNotification("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è", "warning");
    return;
  }

  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
    <form class="checkout-form" onsubmit="placeOrder(event)">
      <div class="form-row">
        <div class="form-group">
          <label>–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ*</label>
          <input type="text" id="order-name" required value="${currentUser.displayName || ''}">
        </div>
        <div class="form-group">
          <label>–¢–µ–ª–µ—Ñ–æ–Ω*</label>
          <input type="tel" id="order-phone" required placeholder="+380XXXXXXXXX">
        </div>
      </div>
      <div class="form-group">
        <label>Email*</label>
        <input type="email" id="order-email" required value="${currentUser.email || ''}">
      </div>
      
      <div class="delivery-section">
        <h4>–î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é</h4>
        <div class="delivery-notice">
          <i class="fas fa-info-circle"></i>
          <p>–î–æ—Å—Ç–∞–≤–∫–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞. –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —Ç–∞ –æ–ø–ª–∞—á—É—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</p>
        </div>
        <div class="form-group">
          <label>–ú—ñ—Å—Ç–æ*</label>
          <input type="text" id="np-city" required placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ">
        </div>
        <div class="form-group">
          <label>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏*</label>
          <input type="text" id="np-warehouse" required placeholder="–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è">
        </div>
      </div>
      
      <div class="payment-section">
        <h4>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏</h4>
        <div class="payment-options">
          <label class="payment-option">
            <input type="radio" name="payment" value="cash" checked>
            <span>–ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ</span>
          </label>
          <label class="payment-option">
            <input type="radio" name="payment" value="card">
            <span>–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é</span>
          </label>
        </div>
      </div>
      
      <div class="order-summary">
        <h4>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h4>
        <div class="order-items">
          ${generateOrderSummary()}
        </div>
        <div class="order-total">
          <div class="total-line">
            <span>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</span>
            <span>${formatPrice(calculateCartTotal())} ‚Ç¥</span>
          </div>
          <div class="total-line">
            <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
            <span>–ó–≥—ñ–¥–Ω–æ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞</span>
          </div>
          <div class="total-line final-total">
            <span>–†–∞–∑–æ–º:</span>
            <span>${formatPrice(calculateCartTotal())} ‚Ç¥</span>
          </div>
        </div>
      </div>
      
      <button type="submit" class="btn btn-buy">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
    </form>
  `;
  
  openModal();
}

// ===== –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –í FIREBASE =====
function placeOrder(event) {
  event.preventDefault();
  
  if (!currentUser || !currentUser.uid) {
    closeModal();
    openAuthModal();
    showNotification("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è", "warning");
    return;
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏
  const name = document.getElementById('order-name').value.trim();
  const phone = document.getElementById('order-phone').value.trim();
  const email = document.getElementById('order-email').value.trim();
  const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
  
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    showNotification("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É", "error");
    return;
  }
  
  const phoneRegex = /^[\+]?[0-9]{10,15}$/;
  const cleanPhone = phone.replace(/\D/g, '');
  if (!phoneRegex.test(cleanPhone)) {
    showNotification("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "error");
    return;
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
  const city = document.getElementById('np-city').value.trim();
  const warehouse = document.getElementById('np-warehouse').value.trim();
  
  if (!city || !warehouse) {
    showNotification('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é', 'error');
    return;
  }
  
  const deliveryDetails = { 
    service: '–ù–æ–≤–∞ –ü–æ—à—Ç–∞', 
    city, 
    warehouse 
  };
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
  if (!name || !phone || !email) {
    showNotification('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ—à–∏–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
  if (Object.keys(cart).length === 0) {
    showNotification('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π', 'error');
    return;
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const order = {
    userId: currentUser.uid,
    userName: name,
    userPhone: cleanPhone,
    userEmail: email,
    items: {...cart},
    total: calculateCartTotal(),
    delivery: deliveryDetails,
    paymentMethod,
    status: 'new',
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  };
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Firestore
  db.collection("orders").add(order)
    .then((docRef) => {
      // –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
      cart = {};
      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
      updateCartCount();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∑–∞–∫–∞–∑–æ–º
      sendOrderEmail(docRef.id, order);
      
      showNotification(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –ù–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${docRef.id}`);
      closeModal();
      showOrderConfirmation(docRef.id, order);
    })
    .catch(error => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "error");
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
function toggleDeliveryDetails(method) {
  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∑ –¥–µ—Ç–∞–ª—è–º–∏
  document.querySelectorAll('.delivery-details').forEach(detail => {
    detail.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –±–ª–æ–∫
  document.getElementById(`${method}-details`).classList.add('active');
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
function generateOrderSummary() {
  let summaryHTML = '';
  
  for (const [productId, quantity] of Object.entries(cart)) {
    const product = products.find(p => p.id === productId);
    if (product) {
      summaryHTML += `
        <div class="order-item">
          <span>${product.title} x${quantity}</span>
          <span>${formatPrice(product.price * quantity)} ‚Ç¥</span>
        </div>
      `;
    }
  }
  
  return summaryHTML;
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∫–æ—à–∏–∫–∞
function calculateCartTotal() {
  return Object.entries(cart).reduce((sum, [productId, quantity]) => {
    const product = products.find(p => p.id === productId);
    return sum + (product ? product.price * quantity : 0);
  }, 0);
}

// ===== –ü–û–ö–ê–ó –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–ö–ê–ó–ê =====
function showOrderConfirmation(orderId, order) {
  const modalContent = document.getElementById("modal-content");
  
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <div class="order-confirmation">
      <div class="confirmation-header">
        <i class="fas fa-check-circle"></i>
        <h3>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</h3>
      </div>
      <div class="confirmation-details">
        <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
        <p><strong>–Ü–º'—è:</strong> ${order.userName}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.userPhone}</p>
        <p><strong>Email:</strong> ${order.userEmail}</p>
        <p><strong>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery.service}</p>
        <div class="delivery-notice">
          <i class="fas fa-info-circle"></i>
          <p>–î–æ—Å—Ç–∞–≤–∫–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞. –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —Ç–∞ –æ–ø–ª–∞—á—É—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</p>
        </div>
        <p><strong>–ú—ñ—Å—Ç–æ:</strong> ${order.delivery.city}</p>
        <p><strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω–∏–µ:</strong> ${order.delivery.warehouse}</p>
        <p><strong>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</strong> ${order.paymentMethod === 'cash' ? '–ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ' : '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é'}</p>
        <p><strong>–°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤:</strong> ${formatPrice(order.total)} ‚Ç¥</p>
        
        <div class="manager-notice" style="margin-top: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #007bff;">
          <i class="fas fa-phone" style="color: #007bff; margin-right: 10px;"></i>
          <strong>–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.</strong>
        </div>
      </div>
      <div class="confirmation-actions">
        <button class="btn btn-detail" onclick="closeModal()">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏</button>
        <button class="btn" onclick="viewOrders()">–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
      </div>
    </div>
  `;
  
  openModal();
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function openModal() {
  document.getElementById("modal").classList.add("active");
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function closeModal() {
  document.getElementById("modal").classList.remove("active");
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function openAuthModal() {
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
    <div class="auth-tabs">
      <div class="auth-tab active" onclick="switchAuthTab('login')">–í—Ö—ñ–¥</div>
      <div class="auth-tab" onclick="switchAuthTab('register')">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</div>
      <div class="auth-tab" onclick="switchAuthTab('admin')">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</div>
    </div>
    <form id="login-form" onsubmit="login(event)">
      <div class="form-group">
        <label>Email</label>
        <input type="email" required>
      </div>
      <div class="form-group">
        <label>–ü–∞—Ä–æ–ª—å</label>
        <input type="password" required>
      </div>
      <button type="submit" class="btn btn-detail">–£–≤—ñ–π—Ç–∏</button>
    </form>
    <form id="register-form" style="display:none;" onsubmit="register(event)">
      <div class="form-group">
        <label>–Ü–º'—è</label>
        <input type="text" required>
      </div>
      <div class="form-group">
        <label>Email</label>
        <input type="email" required>
      </div>
      <div class="form-group">
        <label>–ü–∞—Ä–æ–ª—å</label>
        <input type="password" required minlength="6">
      </div>
      <button type="submit" class="btn btn-detail">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
    </form>
    <div id="admin-auth-form" style="display:none;">
      <p>–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:</p>
      <div class="form-group">
        <label>–ü–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
        <input type="password" id="admin-password" required>
      </div>
      <button class="btn btn-admin" onclick="verifyAdminPassword()">–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</button>
    </div>
  `;
  
  openModal();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function switchAuthTab(tab) {
  const loginForm = document.getElementById("login-form");
  const registerForm = document.getElementById("register-form");
  const adminForm = document.getElementById("admin-auth-form");
  const tabs = document.querySelectorAll(".auth-tab");
  
  tabs.forEach(t => t.classList.remove('active'));
  
  if (tab === 'login') {
    loginForm.style.display = 'block';
    registerForm.style.display = 'none';
    adminForm.style.display = 'none';
    tabs[0].classList.add('active');
  } else if (tab === 'register') {
    loginForm.style.display = 'none';
    registerForm.style.display = 'block';
    adminForm.style.display = 'none';
    tabs[1].classList.add('active');
  } else if (tab === 'admin') {
    loginForm.style.display = 'none';
    registerForm.style.display = 'none';
    adminForm.style.display = 'block';
    tabs[2].classList.add('active');
  }
}

// –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
function login(event) {
  event.preventDefault();
  const email = event.target.querySelector('input[type="email"]').value;
  const password = event.target.querySelector('input[type="password"]').value;
  
  auth.signInWithEmailAndPassword(email, password)
    .then(() => {
      showNotification("–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
      closeModal();
    })
    .catch(error => {
      let message = "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É";
      switch (error.code) {
        case 'auth/user-not-found':
          message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π";
          break;
        case 'auth/wrong-password':
          message = "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å";
          break;
      }
      showNotification(message, "error");
    });
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
function register(event) {
  event.preventDefault();
  const name = event.target.querySelector('input[type="text"]').value;
  const email = event.target.querySelector('input[type="email"]').value;
  const password = event.target.querySelector('input[type="password"]').value;
  
  auth.createUserWithEmailAndPassword(email, password)
    .then((userCredential) => {
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      return userCredential.user.updateProfile({
        displayName: name
      });
    })
    .then(() => {
      showNotification("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
      closeModal();
    })
    .catch(error => {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + error.message, "error");
    });
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function verifyAdminPassword() {
  const password = document.getElementById("admin-password").value;
  if (password === ADMIN_PASSWORD) {
    if (!currentUser) {
      showNotification("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É", "error");
      switchAuthTab('login');
      return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admins = JSON.parse(localStorage.getItem(ADMINS_STORAGE_KEY) || '{}');
    admins[currentUser.uid] = true;
    localStorage.setItem(ADMINS_STORAGE_KEY, JSON.stringify(admins));
    
    document.getElementById("admin-panel").style.display = "block";
    adminMode = true;
    showNotification("–ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—Ä–∏–º–∞–Ω—ñ");
    closeModal();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    loadAdminOrders();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
    document.getElementById("page-views-container").style.display = "block";
    setupPageCounter();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    addReviewsTabIfNotExists();
  } else {
    showNotification("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "error");
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function promptAdminPassword() {
  const password = prompt("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:");
  if (password === ADMIN_PASSWORD) {
    if (!currentUser) {
      showNotification("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É", "error");
      openAuthModal();
      return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admins = JSON.parse(localStorage.getItem(ADMINS_STORAGE_KEY) || '{}');
    admins[currentUser.uid] = true;
    localStorage.setItem(ADMINS_STORAGE_KEY, JSON.stringify(admins));
    
    document.getElementById("admin-panel").style.display = "block";
    adminMode = true;
    showNotification("–ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—Ä–∏–º–∞–Ω—ñ");
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    loadAdminOrders();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
    document.getElementById("page-views-container").style.display = "block";
    setupPageCounter();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    addReviewsTabIfNotExists();
  } else if (password) {
    showNotification("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "error");
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function checkAdminStatus(userId) {
  db.collection("admins").doc(userId).get()
    .then((doc) => {
      if (doc.exists) {
        document.getElementById("admin-panel").style.display = "block";
        adminMode = true;
        loadAdminOrders();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
        document.getElementById("page-views-container").style.display = "block";
        setupPageCounter();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
        addReviewsTabIfNotExists();
      }
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ", error);
    });
}

// –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
function logout() {
  // –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ, —â–æ–± –Ω–µ –≤–≤–æ–¥–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É
  auth.signOut()
    .then(() => {
      showNotification("–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    })
    .catch(error => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É", "error");
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
function switchTab(tabId) {
  const tabs = document.querySelectorAll(".tab");
  const tabContents = document.querySelectorAll(".tab-content");
  
  tabs.forEach(tab => tab.classList.remove("active"));
  tabContents.forEach(content => content.classList.remove("active"));
  
  document.querySelector(`.tab[onclick="switchTab('${tabId}')"]`).classList.add("active");
  document.getElementById(tabId).classList.add("active");
  
  // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–æ–≤–∞—Ä—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ó—Ö
  if (tabId === 'products-tab') {
    loadAdminProducts();
  }
  
  // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ó—Ö
  if (tabId === 'orders-tab') {
    loadAdminOrders();
  }
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
  if (tabId === 'reviews-tab-content') {
    loadReviewsForModeration();
  }
}

// ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–¨ –í –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–Ü =====
function loadAdminOrders() {
  const ordersList = document.getElementById("admin-orders-list");
  ordersList.innerHTML = '<p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>';
  
  // –°–ª—É—Ö–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
  db.collection("orders")
    .orderBy("createdAt", "desc")
    .onSnapshot((querySnapshot) => {
      if (querySnapshot.empty) {
        ordersList.innerHTML = '<p>–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î</p>';
        return;
      }
      
      ordersList.innerHTML = '';
      
      querySnapshot.forEach((doc) => {
        const order = { id: doc.id, ...doc.data() };
        const orderDate = order.createdAt ? order.createdAt.toDate().toLocaleString('uk-UA') : '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        let statusClass = 'status-new';
        let statusText = '–ù–æ–≤–∏–π';
        
        if (order.status === 'processing') {
          statusClass = 'status-processing';
          statusText = '–í –æ–±—Ä–æ–±—Ü—ñ';
        } else if (order.status === 'shipped') {
          statusClass = 'status-shipped';
          statusText = '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
        } else if (order.status === 'delivered') {
          statusClass = 'status-delivered';
          statusText = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        } else if (order.status === 'cancelled') {
          statusClass = 'status-cancelled';
          statusText = '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
        }
        
        const orderElement = document.createElement('div');
        orderElement.className = 'admin-order-item';
        orderElement.innerHTML = `
          <div class="order-header">
            <h4>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}</h4>
            <span class="order-date">${orderDate}</span>
          </div>
          <div class="order-info">
            <p><strong>–ö–ª—ñ—î–Ω—Ç:</strong> ${order.userName} (${order.userEmail}, ${order.userPhone})</p>
            <p><strong>–°—É–º–∞:</strong> ${formatPrice(order.total)} ‚Ç¥</p>
            <p><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> ${order.delivery.service}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="order-status ${statusClass}">${statusText}</span></p>
            ${order.ttn ? `<p><strong>–¢–¢–ù:</strong> ${order.ttn}</p>` : ''}
          </div>
          <div class="admin-order-actions">
            <button class="btn btn-detail" onclick="viewOrderDetails('${order.id}')">–î–µ—Ç–∞–ª—ñ</button>
            <select onchange="changeOrderStatus('${order.id}', this.value)">
              <option value="new" ${order.status === 'new' ? 'selected' : ''}>–ù–æ–≤–∏–π</option>
              <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>–í –æ–±—Ä–æ–±—Ü—ñ</option>
              <option value="shipped" ${order.status === 'shipped' ? 'selected' : ''}>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</option>
              <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</option>
              <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
            </select>
            <button class="btn" onclick="addTTNToOrder('${order.id}')">–¢–¢–ù</button>
            <button class="btn btn-danger" onclick="deleteOrder('${order.id}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
          </div>
        `;
        
        ordersList.appendChild(orderElement);
      });
    }, (error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å: ", error);
      ordersList.innerHTML = '<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å</p>';
    });
}

// ===== –§–£–ù–ö–¶–Ü–Ø –î–û–î–ê–í–ê–ù–ù–Ø –¢–¢–ù –î–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø =====
function addTTNToOrder(orderId) {
  const ttn = prompt('–í–≤–µ–¥—ñ—Ç—å –¢–¢–ù (—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä) –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:');
  
  if (ttn && ttn.trim() !== '') {
    db.collection("orders").doc(orderId).update({
      ttn: ttn.trim(),
      ttnAddedAt: firebase.firestore.FieldValue.serverTimestamp(),
      updatedAt: firebase.firestore.FieldValue.serverTimestamp()
    })
    .then(() => {
      showNotification("–¢–¢–ù —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –¢–¢–ù
      db.collection("orders").doc(orderId).get()
        .then((doc) => {
          if (doc.exists) {
            const order = { id: doc.id, ...doc.data() };
            sendTTNEmail(orderId, order);
          }
        });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      loadAdminOrders();
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¢–¢–ù: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¢–¢–ù", "error");
    });
  }
}

// ===== –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–ü–†–ê–í–ö–ò EMAIL –ü–†–û –¢–¢–ù =====
function sendTTNEmail(orderId, order) {
  if (!order.ttn) return;
  
  const templateParams = {
    to_email: order.userEmail,
    order_id: orderId,
    customer_name: order.userName,
    ttn_number: order.ttn,
    delivery_service: order.delivery.service,
    delivery_city: order.delivery.city,
    delivery_warehouse: order.delivery.warehouse,
    tracking_url: `https://tracking.novaposhta.ua/#/uk/search/${order.ttn}`
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–¢–ù
  emailjs.send(EMAILJS_SERVICE_ID, "template_ttn_notification", templateParams)
    .then(function(response) {
      console.log('Email —Å –¢–¢–ù —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', response.status, response.text);
    }, function(error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –¢–¢–ù:', error);
    });
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–£–°–û–í =====
function getStatusClass(status) {
  const statusClasses = {
    'new': 'status-new',
    'processing': 'status-processing',
    'shipped': 'status-shipped',
    'delivered': 'status-delivered',
    'cancelled': 'status-cancelled'
  };
  return statusClasses[status] || 'status-new';
}

function getStatusText(status) {
  const statusTexts = {
    'new': '–ù–æ–≤–∏–π',
    'processing': '–í –æ–±—Ä–æ–±—Ü—ñ',
    'shipped': '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
  };
  return statusTexts[status] || '–ù–æ–≤–∏–π';
}

// ===== –ó–ú–Ü–ù–ê –°–¢–ê–¢–£–°–£ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø =====
function changeOrderStatus(orderId, status) {
  db.collection("orders").doc(orderId).update({
    status,
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  })
  .then(() => {
    showNotification("–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ");
  })
  .catch((error) => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "error");
  });
}

// ===== –í–ò–î–ê–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø =====
function deleteOrder(orderId) {
  if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
    db.collection("orders").doc(orderId).delete()
      .then(() => {
        showNotification("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
      })
      .catch((error) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ", error);
        showNotification("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "error");
      });
  }
}

// ===== –ü–ï–†–ï–ì–õ–Ø–î –î–ï–¢–ê–õ–ï–ô –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (–û–ë–ù–û–í–õ–ï–ù–ê –í–ï–†–°–ò–Ø) =====
function viewOrderDetails(orderId) {
  db.collection("orders").doc(orderId).get()
    .then((doc) => {
      if (!doc.exists) {
        showNotification("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "error");
        return;
      }
      
      const order = { id: doc.id, ...doc.data() };
      const modalContent = document.getElementById("modal-content");
      
      let itemsHTML = '';
      for (const [productId, quantity] of Object.entries(order.items)) {
        const product = products.find(p => p.id === productId);
        if (product) {
          itemsHTML += `
            <div class="cart-item">
              <img src="${product.image || 'https://via.placeholder.com/80x80?text=No+Image'}" alt="${product.title}" class="cart-item-image">
              <div class="cart-item-details">
                <h4 class="cart-item-title">${product.title}</h4>
                <div class="cart-item-price">${formatPrice(product.price)} ‚Ç¥ x ${quantity} = ${formatPrice(product.price * quantity)} ‚Ç¥</div>
              </div>
            </div>
          `;
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
      const orderDate = order.createdAt ? order.createdAt.toDate().toLocaleString('uk-UA') : '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
      const updatedDate = order.updatedAt ? order.updatedAt.toDate().toLocaleString('uk-UA') : '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
      const ttnDate = order.ttnAddedAt ? order.ttnAddedAt.toDate().toLocaleString('uk-UA') : '';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¢–¢–ù
      const ttnSection = order.ttn ? `
        <div class="ttn-section" style="margin: 1rem 0; padding: 1rem; background: #f0f8ff; border-radius: 8px; border-left: 4px solid #007bff;">
          <h4>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è</h4>
          <p><strong>–¢–¢–ù (—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä):</strong> ${order.ttn}</p>
          <p><strong>–î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¢–¢–ù:</strong> ${ttnDate}</p>
          <p><strong>–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> –ù–æ–≤–∞ –ü–æ—à—Ç–∞</p>
          <p><a href="https://tracking.novaposhta.ua/#/uk/search/${order.ttn}" target="_blank" style="color: #007bff; text-decoration: none;">
            <i class="fas fa-external-link-alt"></i> –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É
          </a></p>
        </div>
      ` : `
        <div class="ttn-section" style="margin: 1rem 0; padding: 1rem; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;">
          <p><i class="fas fa-info-circle"></i> –¢–¢–ù —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –¥–æ —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</p>
        </div>
      `;
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –¢–¢–ù
      const ttnButton = adminMode ? `
        <div style="margin: 1rem 0;">
          <button class="btn btn-detail" onclick="addTTNToOrder('${order.id}')">
            <i class="fas fa-truck"></i> ${order.ttn ? '–ó–º—ñ–Ω–∏—Ç–∏ –¢–¢–ù' : '–î–æ–¥–∞—Ç–∏ –¢–¢–ù'}
          </button>
        </div>
      ` : '';
      
      modalContent.innerHTML = `
        <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
        <h3>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}</h3>
        <div class="order-details">
          ${ttnSection}
          ${ttnButton}
          
          <div class="customer-info">
            <h4>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞</h4>
            <p><strong>–Ü–º'—è:</strong> ${order.userName}</p>
            <p><strong>Email:</strong> ${order.userEmail}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.userPhone}</p>
          </div>
          
          <div class="order-meta">
            <h4>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h4>
            <p><strong>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</strong> ${orderDate}</p>
            <p><strong>–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> ${updatedDate}</p>
            <p><strong>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</strong> ${order.paymentMethod === 'cash' ? '–ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ' : '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é'}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="order-status ${getStatusClass(order.status)}">${getStatusText(order.status)}</span></p>
          </div>
          
          <div class="delivery-info">
            <h4>–î–æ—Å—Ç–∞–≤–∫–∞</h4>
            <p><strong>–°–ª—É–∂–±–∞:</strong> ${order.delivery.service}</p>
            ${order.delivery.city ? `<p><strong>–ú—ñ—Å—Ç–æ:</strong> ${order.delivery.city}</p>` : ''}
            ${order.delivery.warehouse ? `<p><strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</strong> ${order.delivery.warehouse}</p>` : ''}
            ${order.delivery.address ? `<p><strong>–ê–¥—Ä–µ—Å–∞:</strong> ${order.delivery.address}</p>` : ''}
          </div>
          
          <div class="order-items">
            <h4>–¢–æ–≤–∞—Ä–∏</h4>
            ${itemsHTML}
          </div>
          
          <div class="order-total">
            <h4>–†–∞–∑–æ–º: ${formatPrice(order.total)} ‚Ç¥</h4>
          </div>
        </div>
      `;
      
      openModal();
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "error");
    });
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –û–¢–ó–´–í–û–í –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò =====
function loadReviewsForModeration() {
  const reviewsContainer = document.getElementById("reviews-moderation-container");
  if (!reviewsContainer) return;
  
  reviewsContainer.innerHTML = "<p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó...</p>";
  
  db.collection("reviews")
    .where("approved", "==", false)
    .orderBy("createdAt", "desc")
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        reviewsContainer.innerHTML = "<p>–ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó</p>";
        return;
      }
      
      let reviewsHTML = "";
      querySnapshot.forEach((doc) => {
        const review = { id: doc.id, ...doc.data() };
        const reviewDate = review.createdAt ? review.createdAt.toDate().toLocaleDateString('uk-UA') : '';
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        const product = products.find(p => p.id === review.productId);
        const productName = product ? product.title : review.productId;
        
        reviewsHTML += `
          <div class="moderation-review-item">
            <h4>–í—ñ–¥–≥—É–∫ –Ω–∞ —Ç–æ–≤–∞—Ä: ${productName}</h4>
            <p><strong>–í—ñ–¥:</strong> ${review.userName}</p>
            <div class="review-rating">${"‚òÖ".repeat(review.rating)}${"‚òÜ".repeat(5 - review.rating)}</div>
            <p><strong>–î–∞—Ç–∞:</strong> ${reviewDate}</p>
            <p>${review.text}</p>
            <div class="moderation-actions">
              <button class="btn btn-success" onclick="approveReview('${doc.id}')">–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>
              <button class="btn btn-danger" onclick="deleteReview('${doc.id}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
          </div>
        `;
      });
      
      reviewsContainer.innerHTML = reviewsHTML;
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: ", error);
      reviewsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤</p>";
    });
}

// ===== –û–î–û–ë–†–ï–ù–ò–ï –û–¢–ó–´–í–ê =====
function approveReview(reviewId) {
  db.collection("reviews").doc(reviewId).update({
    approved: true,
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  })
  .then(() => {
    showNotification("–í—ñ–¥–≥—É–∫ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");
    loadReviewsForModeration();
  })
  .catch((error) => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É: ", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É", "error");
  });
}

// ===== –£–î–ê–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê =====
function deleteReview(reviewId) {
  if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –≤—ñ–¥–≥—É–∫? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
    db.collection("reviews").doc(reviewId).delete()
      .then(() => {
        showNotification("–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
        loadReviewsForModeration();
      })
      .catch((error) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É: ", error);
        showNotification("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É", "error");
      });
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è URL —Ñ—ñ–¥—É
function saveFeedUrl() {
  const feedUrl = document.getElementById("feed-url").value;
  localStorage.setItem(FEED_URL_KEY, feedUrl);
  showNotification("URL —Ñ—ñ–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
}

// –û—á–∏—â–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É
function clearCatalog() {
  if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
    showLoadingSkeleton();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
    db.collection("products").get()
      .then((querySnapshot) => {
        const batch = db.batch();
        querySnapshot.forEach((doc) => {
          batch.delete(doc.ref);
        });
        return batch.commit();
      })
      .then(() => {
        products = [];
        localStorage.removeItem('products_backup');
        renderProducts();
        renderFeaturedProducts();
        renderCategories();
        renderBrands();
        showNotification("–ö–∞—Ç–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω–æ");
      })
      .catch((error) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É: ", error);
        showNotification("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É", "error");
      });
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –≤ JSON
function exportJSON() {
  const dataStr = JSON.stringify(products, null, 2);
  const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
  
  const exportFileDefaultName = 'products.json';
  
  const linkElement = document.createElement('a');
  linkElement.setAttribute('href', dataUri);
  linkElement.setAttribute('download', exportFileDefaultName);
  linkElement.click();
  
  showNotification("–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ JSON");
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
function openAddProductModal() {
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä</h3>
    <form onsubmit="saveNewProduct(event)">
      <div class="form-group">
        <label>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É</label>
        <input type="text" id="product-title" required>
      </div>
      <div class="form-group">
        <label>–û–ø–∏—Å</label>
        <textarea id="product-description" rows="3"></textarea>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>–¶—ñ–Ω–∞, ‚Ç¥</label>
          <input type="number" id="product-price" min="0" step="0.01" required>
        </div>
        <div class="form-group">
          <label>–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞, ‚Ç¥</label>
          <input type="number" id="product-old-price" min="0" step="0.01">
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
          <input type="text" id="product-category" required>
        </div>
        <div class="form-group">
          <label>–ë—Ä–µ–Ω–¥</label>
          <input type="text" id="product-brand" required>
        </div>
      </div>
      <div class="form-group">
        <label>URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
        <input type="url" id="product-image">
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>
            <input type="checkbox" id="product-in-stock"> –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
          </label>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="product-is-new"> –ù–æ–≤–∏–Ω–∫–∞
          </label>
        </div>
      </div>
      <div class="form-group">
        <label>–ó–Ω–∏–∂–∫–∞, %</label>
        <input type="number" id="product-discount" min="0" max="100">
      </div>
      <button type="submit" class="btn btn-detail">–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–æ–≤–∞—Ä</button>
    </form>
  `;
  
  openModal();
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
function saveNewProduct(event) {
  event.preventDefault();
  
  const newProduct = {
    title: document.getElementById('product-title').value,
    description: document.getElementById('product-description').value,
    price: parseFloat(document.getElementById('product-price').value),
    oldPrice: document.getElementById('product-old-price').value ? parseFloat(document.getElementById('product-old-price').value) : null,
    category: document.getElementById('product-category').value,
    brand: document.getElementById('product-brand').value,
    image: document.getElementById('product-image').value || '',
    inStock: document.getElementById('product-in-stock').checked,
    isNew: document.getElementById('product-is-new').checked,
    discount: document.getElementById('product-discount').value ? parseInt(document.getElementById('product-discount').value) : null
  };
  
  saveProduct(newProduct)
    .then(() => {
      closeModal();
      // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
      switchTab('products-tab');
    });
}

// –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
function loadAdminProducts() {
  const productsList = document.getElementById("admin-products-list");
  productsList.innerHTML = '<p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...</p>';
  
  db.collection("products")
    .orderBy("createdAt", "desc")
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        productsList.innerHTML = '<p>–¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î</p>';
        return;
      }
      
      productsList.innerHTML = `
        <div style="margin-bottom: 15px;">
          <input type="text" id="admin-products-search" placeholder="–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤..." oninput="searchAdminProducts(this.value)" style="padding: 8px; width: 100%; border: 1px solid #ddd; border-radius: var(--border-radius);">
        </div>
        <div class="admin-products-container"></div>
      `;
      
      const productsContainer = productsList.querySelector('.admin-products-container');
      
      querySnapshot.forEach((doc) => {
        const product = { id: doc.id, ...doc.data() };
        const productElement = document.createElement('div');
        productElement.className = 'admin-product-item';
        productElement.style.border = '1px solid #eee';
        productElement.style.padding = '15px';
        productElement.style.marginBottom = '15px';
        productElement.style.borderRadius = '8px';
        
        productElement.innerHTML = `
          <div style="display: flex; justify-content: space-between; align-items: flex-start;">
            <div style="flex: 1;">
              <h4>${product.title}</h4>
              <p>${product.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}</p>
              <p><strong>–¶—ñ–Ω–∞:</strong> ${formatPrice(product.price)} ‚Ç¥</p>
              <p><strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> ${product.category}</p>
              <p><strong>–ë—Ä–µ–Ω–¥:</strong> ${product.brand}</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${product.inStock ? '–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' : '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}</p>
            </div>
            <div>
              <img src="${product.image || 'https://via.placeholder.com/100x100?text=No+Image'}" alt="${product.title}" style="width: 100px; height: 100px; object-fit: cover; border-radius: var(--border-radius);">
            </div>
          </div>
          <div style="margin-top: 15px; display: flex; gap: 10px;">
            <button class="btn btn-detail" onclick="editProduct('${product.id}')">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
            <button class="btn" style="background: var(--danger); color: white;" onclick="deleteProduct('${product.id}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
          </div>
        `;
        
        productsContainer.appendChild(productElement);
      });
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: ", error);
      productsList.innerHTML = '<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤</p>';
    });
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
function searchAdminProducts(query) {
  const productItems = document.querySelectorAll('.admin-product-item');
  const searchTerm = query.toLowerCase();
  
  productItems.forEach(item => {
    const title = item.querySelector('h4').textContent.toLowerCase();
    const description = item.querySelector('p').textContent.toLowerCase();
    
    if (title.includes(searchTerm) || description.includes(searchTerm)) {
      item.style.display = 'block';
    } else {
      item.style.display = 'none';
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
function editProduct(productId) {
  const product = products.find(p => p.id === productId);
  if (!product) return;
  
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä</h3>
    <form onsubmit="updateProduct(event, '${productId}')">
      <div class="form-group">
        <label>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É</label>
        <input type="text" id="edit-product-title" value="${product.title}" required>
      </div>
      <div class="form-group">
        <label>–û–ø–∏—Å</label>
        <textarea id="edit-product-description" rows="3">${product.description || ''}</textarea>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>–¶—ñ–Ω–∞, ‚Ç¥</label>
          <input type="number" id="edit-product-price" value="${product.price}" min="0" step="0.01" required>
        </div>
        <div class="form-group">
          <label>–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞, ‚Ç¥</label>
          <input type="number" id="edit-product-old-price" value="${product.oldPrice || ''}" min="0" step="0.01">
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
          <input type="text" id="edit-product-category" value="${product.category}" required>
        </div>
        <div class="form-group">
          <label>–ë—Ä–µ–Ω–¥</label>
          <input type="text" id="edit-product-brand" value="${product.brand}" required>
        </div>
      </div>
      <div class="form-group">
        <label>URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
        <input type="url" id="edit-product-image" value="${product.image || ''}">
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>
            <input type="checkbox" id="edit-product-in-stock" ${product.inStock ? 'checked' : ''}> –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
          </label>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="edit-product-is-new" ${product.isNew ? 'checked' : ''}> –ù–æ–≤–∏–Ω–∫–∞
          </label>
        </div>
      </div>
      <div class="form-group">
        <label>–ó–Ω–∏–∂–∫–∞, %</label>
        <input type="number" id="edit-product-discount" value="${product.discount || ''}" min="0" max="100">
      </div>
      <button type="submit" class="btn btn-detail">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
    </form>
  `;
  
  openModal();
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
function updateProduct(event, productId) {
  event.preventDefault();
  
  const updatedProduct = {
    id: productId,
    title: document.getElementById('edit-product-title').value,
    description: document.getElementById('edit-product-description').value,
    price: parseFloat(document.getElementById('edit-product-price').value),
    oldPrice: document.getElementById('edit-product-old-price').value ? parseFloat(document.getElementById('edit-product-old-price').value) : null,
    category: document.getElementById('edit-product-category').value,
    brand: document.getElementById('edit-product-brand').value,
    image: document.getElementById('edit-product-image').value || '',
    inStock: document.getElementById('edit-product-in-stock').checked,
    isNew: document.getElementById('edit-product-is-new').checked,
    discount: document.getElementById('edit-product-discount').value ? parseInt(document.getElementById('edit-product-discount').value) : null
  };
  
  saveProduct(updatedProduct)
    .then(() => {
      closeModal();
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
      loadAdminProducts();
    });
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
function deleteProduct(productId) {
  if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
    db.collection("products").doc(productId).delete()
      .then(() => {
        showNotification("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
        loadAdminProducts();
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
        loadProducts();
      })
      .catch((error) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: ", error);
        showNotification("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", "error");
      });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function openProfile() {
  if (!currentUser) {
    showNotification("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É", "warning");
    openAuthModal();
    return;
  }
  
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = `
    <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä–∏—Ç–∏"><i class="fas fa-times" aria-hidden="true"></i></button>
    <h3>–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</h3>
    <div class="profile-info">
      <div class="form-group">
        <label>–Ü–º'—è</label>
        <input type="text" id="profile-name" value="${currentUser.displayName || ''}">
      </div>
      <div class="form-group">
        <label>Email</label>
        <input type="email" id="profile-email" value="${currentUser.email || ''}" disabled>
      </div>
      <div class="form-group">
        <label>–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å</label>
        <input type="password" id="profile-password" placeholder="–ó–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏">
      </div>
      <button class="btn btn-detail" onclick="updateProfile()">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
    </div>
  `;
  
  openModal();
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function updateProfile() {
  const name = document.getElementById('profile-name').value;
  const password = document.getElementById('profile-password').value;
  
  const updates = {};
  if (name !== currentUser.displayName) {
    updates.displayName = name;
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
  const promises = [currentUser.updateProfile(updates)];
  
  // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
  if (password) {
    promises.push(currentUser.updatePassword(password));
  }
  
  Promise.all(promises)
    .then(() => {
      showNotification("–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
      closeModal();
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
      document.getElementById('user-name').textContent = name || currentUser.email;
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: ", error);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: " + error.message, "error");
    });
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function viewOrders() {
  if (!currentUser) {
    showNotification("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É", "warning");
    openAuthModal();
    return;
  }
  
  const modalContent = document.getElementById("modal-content");
  modalContent.innerHTML = '<h3>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3><p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>';
  
  openModal();
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  db.collection("orders")
    .where("userId", "==", currentUser.uid)
    .orderBy("createdAt", "desc")
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        modalContent.innerHTML = `
          <h3>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
          <div class="empty-cart">
            <i class="fas fa-box-open"></i>
            <h3>–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î</h3>
            <p>–í–∏ —â–µ –Ω–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ</p>
          </div>
        `;
        return;
      }
      
      let ordersHTML = '';
      querySnapshot.forEach((doc) => {
        const order = { id: doc.id, ...doc.data() };
        const orderDate = order.createdAt ? order.createdAt.toDate().toLocaleString('uk-UA') : '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        let statusClass = 'status-new';
        let statusText = '–ù–æ–≤–∏–π';
        
        if (order.status === 'processing') {
          statusClass = 'status-processing';
          statusText = '–í –æ–±—Ä–æ–±—Ü—ñ';
        } else if (order.status === 'shipped') {
          statusClass = 'status-shipped';
          statusText = '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
        } else if (order.status === 'delivered') {
          statusClass = 'status-delivered';
          statusText = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        } else if (order.status === 'cancelled') {
          statusClass = 'status-cancelled';
          statusText = '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
        }
        
        ordersHTML += `
          <div class="order-item" style="border: 1px solid #eee; padding: 15px; margin-bottom: 15px; border-radius: 8px;">
            <h4>–ó–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}</h4>
            <p><strong>–î–∞—Ç–∞:</strong> ${orderDate}</p>
            <p><strong>–°—É–º–∞:</strong> ${formatPrice(order.total)} ‚Ç¥</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="order-status ${statusClass}">${statusText}</span></p>
            <p><strong>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery.service}</p>
            <button class="btn btn-detail" onclick="viewOrderDetails('${order.id}')">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>
          </div>
        `;
      });
      
      modalContent.innerHTML = `
        <h3>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
        <div class="user-orders">
          ${ordersHTML}
        </div>
      `;
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å: ", error);
      modalContent.innerHTML = `
        <h3>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
        <p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
      `;
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏
function openRules() {
  document.getElementById('rules-modal').classList.add('active');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏
function closeRulesModal() {
  document.getElementById('rules-modal').classList.remove('active');
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É outside content
document.getElementById('rules-modal').addEventListener('click', function(e) {
  if (e.target === this) {
    closeRulesModal();
  }
});

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function toggleFilters() {
  const filters = document.querySelector('.filters');
  filters.classList.toggle('active');
  
const button = document.querySelector('.filter-toggle');
  if (filters.classList.contains('active')) {
    button.innerHTML = '<i class="fas fa-times"></i> –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏';
  } else {
    button.innerHTML = '<i class="fas fa-filter"></i> –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏';
  }
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—ñ–≤
function addReviewsTabIfNotExists() {
  const existingTab = document.querySelector('.tab[onclick*="reviews-tab-content"]');
  if (!existingTab) {
    const tabsContainer = document.querySelector('.admin-tabs');
    if (tabsContainer) {
      const reviewsTab = document.createElement('div');
      reviewsTab.className = 'tab';
      reviewsTab.setAttribute('onclick', 'switchTab(\'reviews-tab-content\')');
      reviewsTab.textContent = '–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–≥—É–∫—ñ–≤';
      tabsContainer.appendChild(reviewsTab);
      
      const tabContent = document.createElement('div');
      tabContent.id = 'reviews-tab-content';
      tabContent.className = 'tab-content';
      tabContent.innerHTML = `
        <h3>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–≥—É–∫—ñ–≤</h3>
        <div id="reviews-moderation-container"></div>
      `;
      document.querySelector('.admin-content').appendChild(tabContent);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function switchSource(source, element) {
    document.querySelectorAll('.source-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    if (element) {
        element.classList.add('active');
    } else {
        const tabButton = document.querySelector(`.source-tab[onclick*="${source}"]`);
        if (tabButton) {
            tabButton.classList.add('active');
        }
    }
    
    currentFilters.source = source === 'all' ? '' : source;
    currentPage = 1;
    
    const titles = {
        'all': '–í—Å—ñ —Ç–æ–≤–∞—Ä–∏',
        'products1.json': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
        'products2.json': '–ù–∞—Å–æ—Å–∏ —Ç–∞ —Å–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∞',
        'products3.json': '–ö—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
        'products4.json': '–ï–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
        'products5.json': '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏'
    };
    
    document.getElementById('products-title').textContent = titles[source] || '–¢–æ–≤–∞—Ä–∏';
    
    applyFilters();
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
document.addEventListener("DOMContentLoaded", function() {
    initApp();
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
    document.getElementById("modal").addEventListener("click", function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
});